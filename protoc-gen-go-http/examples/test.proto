syntax = "proto3";

package examples;

import "google/api/annotations.proto";
import "middleware/middleware.proto";
import "response/response.proto";

option go_package = "github.com/go-mixed/kratos-protoc/protoc-gen-go-http/examples;examples";

message UserRequest {
  string username = 1;
}

message UserResponse {
  int32 code = 1;
  string message = 2;
  string data = 3;
}

message OpenAIRequest {
  string question = 1;
  float temperature = 2;
  float top_p = 3;
  int32 max_tokens = 4;
  bool stream = 5;
}

message OpenAIResponse {
  int32 code = 1;
  string message = 2;
  string data = 3;
}

service TestService {
  // 企业登录
  rpc User(UserRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/v1/user",
      body: "*",
    };
    // 这里的中间件顺序不是真正的执行顺序，真正的顺序在创建`http.Server`时候就已经确定了，比如：`http.Server(http.Middleware(middleware1, middleware2, middleware3))`
    // the order of middleware in this place is NOT guaranteed, the real order is determined when creating `http.Server`, for example: `http.Server(http.Middleware(middleware1, middleware2, middleware3))`
    option (middleware.caller) = {
      name: "auth",
      arguments: "bearer"
      arguments: "token"
    };
    option (middleware.caller) = {
      name: "throttle",
      arguments: "10"
    };
    option (middleware.caller) = {
      name: "log",
    };
  }

  rpc OpenAI(OpenAIRequest) returns (OpenAIResponse) {
    option (google.api.http) = {
      post: "/v1/openai",
      body: "*",
    };

    option (response.options) = {
      custom: true
    };
  }

  }